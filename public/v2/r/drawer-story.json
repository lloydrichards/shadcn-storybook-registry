{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer-story",
  "type": "registry:ui",
  "title": "Drawer Story",
  "registryDependencies": [
    "drawer"
  ],
  "files": [
    {
      "path": "registry/drawer.stories.tsx",
      "content": "// Replace nextjs-vite with the name of your framework\nimport type { Meta, StoryObj } from \"@storybook/nextjs-vite\";\n\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\";\nimport { expect, fn, userEvent, within } from \"storybook/test\";\n\n/**\n * A drawer component for React.\n */\nconst meta = {\n  title: \"ui/Drawer\",\n  component: Drawer,\n  tags: [\"autodocs\"],\n  args: {\n    onOpenChange: fn(),\n    onClose: fn(),\n    onAnimationEnd: fn(),\n  },\n  render: (args) => (\n    <Drawer {...args}>\n      <DrawerTrigger>Open</DrawerTrigger>\n      <DrawerContent>\n        <DrawerHeader>\n          <DrawerTitle>Are you sure absolutely sure?</DrawerTitle>\n          <DrawerDescription>This action cannot be undone.</DrawerDescription>\n        </DrawerHeader>\n        <DrawerFooter>\n          <DrawerClose className=\"bg-primary text-primary-foreground rounded px-4 py-2\">\n            Submit\n          </DrawerClose>\n          <DrawerClose className=\"hover:underline\">Cancel</DrawerClose>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  ),\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof Drawer>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\n/**\n * The default form of the drawer.\n */\nexport const Default: Story = {};\n\nexport const ShouldOpenCloseContinue: Story = {\n  name: \"when clicking Continue button, should close the dialog\",\n  tags: [\"!dev\", \"!autodocs\"],\n  play: async ({ args, canvasElement }) => {\n    const canvas = within(canvasElement.ownerDocument.body);\n\n    // Open the dialog\n    await userEvent.click(await canvas.findByRole(\"button\", { name: \"Open\" }));\n    await expect(args.onOpenChange).toHaveBeenCalled();\n\n    const dialog = await canvas.findByRole(\"dialog\");\n    expect(dialog).toBeInTheDocument();\n    expect(dialog).toHaveAttribute(\"data-state\", \"open\");\n\n    // Close the dialog\n    await userEvent.click(\n      await canvas.findByRole(\"button\", { name: \"Submit\" }),\n      { delay: 100 },\n    );\n    await expect(args.onClose).toHaveBeenCalled();\n    expect(dialog).toHaveAttribute(\"data-state\", \"closed\");\n  },\n};\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "story": "ui-drawer"
  }
}